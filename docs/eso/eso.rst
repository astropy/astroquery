.. _astroquery.eso:

******************************
ESO Queries (`astroquery.eso`)
******************************

.. warning::

    **⚠️ Backward Compatibility Notice ⚠️**

    **The WDB (Web DataBase) API is being deprecated and replaced by TAP (Table Access Protocol)**,
    a standardized interface for querying astronomical datasets using ADQL (Astronomical Data Query Language).
    While the Python interface remains the same, the values accepted by the ``columns`` and ``column_filters``
    parameters must reflect TAP field names and ADQL syntax. This means that,
    although the structure of your code won't need to change, **the values you pass to the arguments**
    ``columns`` **and** ``column_filters`` **must be revised** to comply with the new format.

    In TAP, ``column_filters`` accepts ADQL expressions. For example:

    .. doctest-skip::

        column_filters = {
            'some_int_column': "< 5",
            'some_float_column_2': ">= 1.23",
            'some_char_column': "like '%John%'",
            'some_generic_column': "in ('mango', 'apple', 'kiwi')",
            'other_generic_column': "between '2024-01-01' and '2024-12-31'"
        }

    Please review your queries carefully and update them accordingly to ensure compatibility with the new astroquery versions.
    See section :ref:`column-filters-fix` at the end of this document. 

Introduction
============

The `ESO Science Archive Facility (SAF) <https://archive.eso.org>`_ is one of the largest ground-based astronomical data repositories in the world. It contains, and provides access to, data from ESO telescopes at the `La Silla <https://www.eso.org/public/teles-instr/lasilla/>`_, `Paranal <https://www.eso.org/public/teles-instr/paranal/>`_, and `APEX <https://www.eso.org/public/teles-instr/apex/>`_ observatories, as well as the submillimeter APEX telescope on Llano de Chajnantor and the `ALMA <https://www.eso.org/public/teles-instr/alma/>`_ array. The archive includes all raw data from La Silla Paranal Observatory, corresponding calibrations, and a wide range of processed data products, either generated by ESO or contributed by the community. It also hosts selected external datasets, such as raw WFCAM/UKIDSS data from the UKIRT facility in Hawaii. As of May 2025, the archive hosts over `4.6 million science products <https://archive.eso.org/scienceportal/home>`_, including:

- `>3.8 million products from La Silla, Paranal, and APEX <https://archive.eso.org/scienceportal/home?observatory=%22La%20Silla%20Paranal%20APEX%22>`_
- `>700,000 ALMA products <https://archive.eso.org/scienceportal/home?observatory=ALMA>`_
- `~2.3 million spectra <https://archive.eso.org/scienceportal/home?dp_type=SPECTRUM>`_ (1D extracted, fully calibrated)
- `>900,000 imaging products <https://archive.eso.org/scienceportal/home?dp_type=IMAGE>`_ in optical, near-IR, and sub-mm bands
- `>500,000 spectral cubes <https://archive.eso.org/scienceportal/home?dp_type=CUBE>`_ from IFU and radio/mm instruments
- `~700,000 catalog records <https://archive.eso.org/scienceportal/home?dp_type=CATALOG>`_ 

Processed data downloaded from the ESO Archive are assigned a **Digital Object Identifier (DOI)**. The list of available DOIs can be browsed `here <https://archive.eso.org/wdb/wdb/doi/collections/query>`_.

Access to data follows ESO’s standard data policy: the **Principal Investigator (PI)** of an observing program has exclusive access to their data during a proprietary period (typically one year), after which the data become publicly available. See the `ESO Data Access Policy <https://archive.eso.org/cms/eso-data-access-policy.html>`_ and `FAQ <https://archive.eso.org/cms/faq.html?q=proprietary>`_ for more information. Browsing the archive does not require authentication, but login is necessary to access proprietary datasets. Use of ESO archival data should be acknowledged in all publications.

There are multiple ways to access the archive:

- The `Raw Data query form <https://archive.eso.org/eso/eso_archive_main.html>`_ gives access to raw frames and their calibrations
- The `Science Portal <https://archive.eso.org/scienceportal/home>`_ allows browsing and retrieval of processed (Phase 3) data
- The `Catalogue Facility <https://www.eso.org/qi/>`_ enables access to PI-contributed catalogue data
- The `Programmatic and Tools access layer <https://archive.eso.org/programmatic/#TAP>`_ provides direct, scriptable access to raw and processed data, metadata, ambient conditions, and catalogues via Virtual Observatory (VO) protocols

This documentation focuses on the last method: accessing the archive programmatically using the ``astroquery.eso`` module. This Python interface allows users to search for both raw and reduced data, retrieve metadata, and download data products directly using dataset identifiers. Proprietary access is supported via authentication with the `ESO User Portal <https://www.eso.org/UserPortal>`_.

Getting started
===============

This is a Python interface for querying the `ESO archive <https://archive.eso.org/cms.html>`_ web `TAP service <https://archive.eso.org/programmatic/#TAP>`_.
For now, it supports the following:

.. - listing available instruments (for raw data)
.. - listing available surveys (reduced data)
.. - searching reduced data products (table ``ivoa.ObsCore``) 
.. - searching raw data (table ``dbo.raw``)
.. - searching instrument specific raw data (table ``ist.<instrument_name>``)
.. - downloading raw and/or reduced data

.. - :ref:`user authentication <eso-user-authentication>`
.. - :ref:`listing available instruments <eso-list-instruments>`
.. - :ref:`listing available surveys <eso-list-surveys>`
.. - :ref:`searching reduced data products <eso-reduced-data>`
.. - :ref:`searching raw data <eso-raw-data>`
.. - :ref:`searching instrument‐specific raw data <eso-query-instrument-constraints>`
.. - :ref:`downloading raw and/or reduced data <eso-download>`

- :ref:`User Authentication <eso-user-authentication>`
- :ref:`Searching Raw Data <eso-raw-data>`
- :ref:`Searching Reduced Data <eso-reduced-data>`
- :ref:`Searching All Data Using ADQL <eso-tap>`
- :ref:`Obtaining Extended Header Information <eso-headers>`
- :ref:`Downloading Raw and/or Reduced Data <eso-download>`

Requirements
============

The following packages are required for the use of this module:

* `keyring <https://pypi.org/project/keyring>`_
* `lxml <https://pypi.org/project/lxml>`_
* `requests <https://pypi.org/project/requests>`_ >= 2.4.0

.. _eso-user-authentication:

Authentication with the ESO User Portal
=======================================

Most datasets in the ESO Science Archive are publicly available and can be downloaded anonymously without requiring authentication. However, access to proprietary datasets—such as those under active proprietary periods—is restricted to authorized users (e.g., PIs of observing programs and their designated delegates). These users must authenticate via the `ESO User Portal <https://www.eso.org/UserPortal>`_.

Authentication is handled using the :meth:`~astroquery.query.QueryWithLogin.login` method. This command initiates a secure login session via the ESO Single Sign-On (SSO) service. It integrates with the `keyring <https://pypi.org/project/keyring>`_ module to securely store your password in your system’s credential manager. After the first login, you should not need to re-enter your credentials for subsequent sessions on the same machine.

Authentication is required when:

- Downloading proprietary files (not yet public)
- Accessing services that require ESO user privileges

Login Examples
--------------

The following examples show typical login and data retrieval workflows:

.. doctest-skip::

    >>> from astroquery.eso import Eso
    >>> eso = Eso()
    >>> # First example: TEST is not a valid username, it will fail
    >>> eso.login(username="TEST") # doctest: +SKIP
    WARNING: No password was found in the keychain for the provided username. [astroquery.query]
    TEST, enter your password:

    INFO: Authenticating TEST on https://www.eso.org/sso ... [astroquery.eso.core]
    ERROR: Authentication failed! [astroquery.eso.core]

    >>> # Second example: pretend ICONDOR is a valid username
    >>> eso.login(username="ICONDOR", store_password=True) # doctest: +SKIP
    WARNING: No password was found in the keychain for the provided username. [astroquery.query]
    ICONDOR, enter your password:

    INFO: Authenticating ICONDOR on https://www.eso.org/sso ... [astroquery.eso.core]
    INFO: Authentication successful! [astroquery.eso.core]

    >>> # After the first login, your password has been stored
    >>> eso.login(username="ICONDOR") # doctest: +SKIP
    INFO: Authenticating ICONDOR on https://www.eso.org/sso ... [astroquery.eso.core]
    INFO: Authentication successful! [astroquery.eso.core]

    >>> # Successful download of a public file (with or without login)
    >>> eso.retrieve_data('AMBER.2006-03-14T07:40:19.830') # doctest: +SKIP
    INFO: Downloading file 1/1 https://dataportal.eso.org/dataPortal/file/AMBER.2006-03-14T07:40:19.830
    INFO: Successfully downloaded dataset AMBER.2006-03-14T07:40:19.830

    >>> # Access denied to a restricted-access file (as anonymous user or as authenticated but not authorised user)
    >>> eso.retrieve_data('ADP.2023-03-02T01:01:24.355') # doctest: +SKIP
    INFO: Downloading file 1/1 https://dataportal.eso.org/dataPortal/file/ADP.2023-03-02T01:01:24.355
    ERROR: Access denied to https://dataportal.eso.org/dataPortal/file/ADP.2023-03-02T01:01:24.355

Automatic Password Storage
--------------------------

As shown above, your password can be stored securely using the `keyring <https://pypi.org/project/keyring>`_ module by passing the argument ``store_password=True`` to ``Eso.login()``. For security reasons, password storage is disabled by default.

.. warning::

   **MAKE SURE YOU TRUST THE MACHINE WHERE YOU USE THIS FUNCTIONALITY!!!**

   When using the ``store_password=True`` option, your password is stored in your system’s keyring. This provides secure local storage, but only do this on machines you fully trust.

**Note:** You can delete your stored password at any time with the following command:

.. doctest-skip::

    >>> keyring.delete_password('astroquery:www.eso.org', 'your_username')

Automatic Login
---------------

To avoid having to enter your username every session, you can configure a default username in the Astroquery configuration file. This file is located as described in the `astropy.config documentation <https://docs.astropy.org/en/stable/config/index.html>`_.

Add the following to the ``[eso]`` section of your config file:

.. doctest-skip::

    [eso]
    username = ICONDOR

Once set, you can simply call ``eso.login()`` without specifying a username:

.. doctest-skip::

    >>> from astroquery.eso import Eso
    >>> eso = Eso()
    >>> eso.login() # doctest: +SKIP
    ICONDOR, enter your ESO password:

**Note:** If automatic login is configured and the password is stored, other ``Eso`` methods (e.g. ``retrieve_data()``) can log you in automatically when needed.

.. _eso-raw-data:

Query the ESO Archive for Raw Data
==================================

The ESO Science Archive provides raw, unprocessed observational files and metadata directly from its suite of instruments. You can search either **instrument-specifically** using :meth:`~astroquery.eso.EsoClass.query_instrument`, which exposes instrument-unique columns and lets you apply hardware-tailored filters, or via the **global raw table** with :meth:`~astroquery.eso.EsoClass.query_main`, which offers a consistent set of columns across all instruments (omitting any instrument-specific fields). This flexibility allows you to perform highly specialized queries when you know exactly which instrument you need, or broad, cross-instrument searches when you want to compare data from multiple instruments. 

Identifying Available Instrument-Specific Queries
-------------------------------------------------

To begin retrieving raw data from the ESO Science Archive, you first need to identify the relevant instrument(s) for your search. Each instrument has its own dedicated query table accessible through the archive’s programmatic `TAP <https://archive.eso.org/programmatic/#TAP>`_ interface.

The list of all supported instruments can be retrieved using the :meth:`~astroquery.eso.EsoClass.list_instruments` method:

.. doctest-remote-data::

    >>> from astroquery.eso import Eso
    >>> eso = Eso()
    >>> eso.list_instruments()
    ['alpaca', 'amber', 'apex', 'crires', 'efosc', 'eris',
    'espresso', 'fiat', 'fors1', 'fors2', 'giraffe', 'gravity',
    'harps', 'hawki', 'isaac', 'kmos', 'matisse', 'midi',
    'muse', 'naco', 'nirps', 'omegacam', 'pionier', 'sinfoni',
    'sofi', 'sphere', 'uves', 'vimos', 'vircam', 'visir',
    'wlgsu', 'xshooter']

This list corresponds to the instruments currently available for programmatic raw data queries in the ESO archive.

**Note:** The list is dynamically generated by querying the archive’s internal TAP service. It can also be reproduced directly by executing the following ADQL query on the `ESO TAP interface <https://archive.eso.org/programmatic/#TAP>`_ (see result `here <https://archive.eso.org/tap_obs/sync?REQUEST=doQuery&LANG=ADQL&MAXREC=200&FORMAT=txt&QUERY=select%20table_name%20from%20TAP_SCHEMA.tables%20where%20schema_name=%27ist%27%20order%20by%20table_name>`_):

.. doctest-skip::

      SELECT table_name 
      FROM TAP_SCHEMA.tables 
      WHERE schema_name = 'ist' 
      ORDER BY table_name

Once you have identified the instrument of interest, you can proceed with constructing your query and retrieving raw data products.

Inspecting available query options
----------------------------------

Once an instrument is selected—for example, ``midi``—you can inspect the available queryable columns using the ``help=True`` keyword in the :meth:`~astroquery.eso.EsoClass.query_instrument` method. This is a useful first step to understand what metadata is available and how to structure your query.

The output includes column names, data types, units, and, where applicable, ``xtype`` information to indicate more specific column content. For example, a column with datatype ``char`` may represent a timestamp or a sky region, which is reflected in the ``xtype`` field (e.g., ``timestamp`` or ``adql:REGION``).

.. doctest-remote-data::

    >>> eso.query_instrument('midi', help=True)  # doctest: +IGNORE_OUTPUT
    INFO:
    Columns present in the table ist.midi:
        column_name     datatype    xtype         unit
    ------------------- -------- ------------ -----------
         access_estsize     long                 kbyte
             access_url     char
           datalink_url     char
               date_obs     char
                    ...
              exp_start     char      timestamp
                    ...
                 object     char
                    ...      
           release_date     char      timestamp
               s_region     char   adql:REGION
                    ...      
                    utc    float                    s

    Number of records present in the table ist.midi:
    437577
    [astroquery.eso.core]

**Note:** for a deeper description of each column, the following query can be issued
on the ESO `Programmatic Access <https://archive.eso.org/programmatic/#TAP>`_ website (`see here <https://archive.eso.org/tap_obs/sync?REQUEST=doQuery&LANG=ADQL&MAXREC=200&FORMAT=txt&QUERY=select%20column_name,%20description%20from%20TAP_SCHEMA.columns%20where%20table_name%20=%20%27ist.midi%27>`_):

``select column_name, description from TAP_SCHEMA.columns where table_name = 'ist.midi'``

Querying with constraints
-------------------------

Once the available query columns have been inspected (e.g., via ``help=True``), you can construct a constrained query to retrieve relevant datasets. For example, suppose you want to retrieve MIDI observations of the target ``NGC 4151`` that were taken between ``2008-01-01`` and ``2009-05-12``.

The ``column_filters`` dictionary allows you to specify conditions for individual columns, using ADQL-compatible expressions under the hood. In this case, the filters apply to:

- ``object``: the target name, matched as a string (case-insensitive)
- ``exp_start``: the observation start time, stored as a ``char`` column with ``timestamp`` ``xtype``

The ``columns`` argument controls which fields are returned in the results table.

.. doctest-remote-data::
    >>> table = eso.query_instrument(
    ...             instrument='midi',
    ...             column_filters={
    ...                 'object':'NGC4151',
    ...                 'exp_start': "between '2008-01-01' and '2009-05-12'"},
    ...             columns=['object', 'date_obs'])
    >>> table
    <Table length=196>
    object         date_obs
    ------- -----------------------
    NGC4151 2008-04-22T02:07:50.154
    NGC4151 2008-04-22T02:08:20.345
    NGC4151 2008-04-22T02:09:47.846
        ...
    NGC4151 2009-05-11T01:42:08.432

**Note:** When building queries:
   
   - Use only column names returned via ``help=True`` (e.g. ``exp_start``, ``object``, ``prog_id``, ``exptime``, etc.).
   - String filters (like ``object``) are matched case-insensitively.
   - Temporal filters on fields like ``exp_start`` or ``release_date`` can use SQL-style syntax (e.g. ``between 'YYYY-MM-DD' and 'YYYY-MM-DD'``).
   - Column names are case-sensitive in Python, so ensure they match exactly.

Querying all instruments
------------------------

In some cases, you may want to query the ESO Science Archive without targeting a specific instrument. This is what the :meth:`~astroquery.eso.EsoClass.query_main` method is designed for. It allows access to the global raw data table, which combines metadata across all instruments. Internally, this method queries the ``dbo.raw`` table via ESO's `TAP service <https://archive.eso.org/programmatic/#TAP>`_, which you could also access directly using ADQL with a simple statement like:

.. doctest-skip::
   SELECT * FROM dbo.raw

Functionally, :meth:`~astroquery.eso.EsoClass.query_main` works the same way as :meth:`~astroquery.eso.EsoClass.query_instrument`, except you don’t need to specify an instrument table name directly. You can still apply column filters, control the columns returned, and limit result counts.

This method is particularly useful for querying instruments that do not have a dedicated instrument-specific table. Examples include:

- e.g. ``feros``: legacy spectrographs
- e.g. ``APICAM``, ``MASCOT``: all-sky cameras or auxiliary systems

Example: retrieving all-sky images from the ``APICAM`` instrument using the ``LUMINANCE`` filter, on a single night (i.e. 2019-04-26):

.. doctest-remote-data::

    >>> eso.maxrec = -1    # Return all results without truncation
    >>> table = eso.query_main(
    ...                     column_filters={
    ...                         'instrument': 'APICAM',
    ...                         'filter_path': 'LUMINANCE',
    ...                         'exp_start': "between '2019-04-26' and '2019-04-27'"})
    >>> print(len(table))
    215
    >>> table.colnames
    ['object', 'ra', 'dec', 'dp_id', 'date_obs', 'prog_id',
    'access_estsize', 'access_url', 'datalink_url', ... 'tpl_start']
    >>> table[["object", "ra", "dec", "date_obs", "prog_id"]]
     <Table length=215>
    object      ra          dec              date_obs          prog_id   
                deg          deg                                          
    object   float64      float64             object            object   
    ------- ------------ ------------ ----------------------- ------------
    ALL SKY 145.29212694 -24.53624194 2019-04-26T00:08:49.000 60.A-9008(A)
    ALL SKY 145.92251305 -24.53560305 2019-04-26T00:11:20.000 60.A-9008(A)
    ALL SKY    146.55707 -24.53497111 2019-04-26T00:13:52.000 60.A-9008(A)
    ...
    ALL SKY 143.56345694 -24.53804388 2019-04-26T23:57:59.000 60.A-9008(A)

**Note:** By default, the number of returned rows is limited to 1000. To retrieve more (or all) results, set:

.. doctest-remote-data::

    >>> eso.maxrec = -1  # disables the row limit entirely

You can also set ``eso.maxrec`` to a smaller/larger number to truncate/allow large queries.

.. _eso-reduced-data:

Query the ESO Archive for Reduced Data
======================================

In addition to raw observational files, the ESO Science Archive provides access to a wide range of **processed (reduced) data products**, also known as **Phase 3** data. These include science-ready images, spectra, and datacubes that have been calibrated and validated by ESO or by contributing survey teams.

This section demonstrates how to search for and retrieve these reduced products using ``astroquery.eso``. The examples focus on **Phase 3 survey data**, which are organized by instrument, observing program, and survey tile.

Identify available surveys
--------------------------

The list of available surveys can be obtained with :meth:`~astroquery.eso.EsoClass.list_surveys` as follows:

.. doctest-remote-data::

    >>> surveys = eso.list_surveys()
    >>> surveys
    ['081.C-0827', '092.A-0472', '096.B-0054', '1100.A-0528', '1101.A-0127', '193.D-0232',
    '195.B-0283', '196.B-0578', '196.D-0214', '197.A-0384', '198.A-0708', '60.A-9284H',
    '60.A-9493', 'ADHOC', 'ALCOHOLS', 'ALLSMOG', 'ALMA', 'AMAZE', 'AMBRE', 'APEX-SciOps',
    'ARP_VST', 'ATLASGAL', 'CAFFEINE', 'ENTROPY', 'ePESSTOplus', 'ERIS-NIX',
    'ERIS-SPIFFIER', 'ESPRESSO', 'ESSENCE', 'FDS', 'FEROS', 'Fornax3D', 'FORS2-SPEC',
    'GAIAESO', 'GCAV', 'GIRAFFE', 'GOODS_FORS2', 'GOODS_ISAAC', 'GOODS_VIMOS_IMAG',
    'GOODS_VIMOS_SPEC', 'GW170817', 'HARPS', 'HAWKI', 'HUGS', 'INSPIRE', 'KIDS', 'KMOS',
    'LEGA-C', 'LESS', 'MAGIC', 'MUSE', 'MUSE-DEEP', 'MUSE-STD', 'MW-BULGE-PSFPHOT',
    'NGTS', 'NIRPS', 'OMEGACAM_INAF', 'PENELLOPE', 'PESSTO', 'PHANGS', 'PIONIER',
    'SHARKS', 'SPHERE', 'SUPER', 'UltraVISTA', 'UVES', 'UVES_SQUAD', 'VANDELS', 'VEGAS',
    'VEILS', 'VEXAS', 'VHS', 'VIDEO', 'VIKING', 'VIMOS', 'VINROUGE', 'VIPERS', 'VISIONS',
    'VMC', 'VPHASplus', 'VST-ATLAS', 'VVV', 'VVVX', 'XQ-100', 'XSGRB', 'XSHOOTER',
    'XShootU', 'XSL', 'ZCOSMOS']

Query a specific survey with constraints
----------------------------------------

Let's assume that we work with the ``HARPS`` survey, and that we are interested in
target ``HD203608``. The archive can be queried as follows:

.. doctest-remote-data::

    >>> table = eso.query_surveys(surveys='HARPS', 
    ...                           column_filters= {"target_name": "HD203608"})
    >>> table
    <Table length=1000>
    target_name    s_ra     s_dec              dp_id             proposal_id  abmaglim access_estsize ...   snr    strehl t_exptime     t_max          t_min      t_resolution t_xel
                deg       deg                                                mag        kbyte      ...                     s           d              d             s            
    object    float64   float64             object               object    float64      int64      ... float64 float64  float64     float64        float64       float64    int64
    ----------- --------- --------- --------------------------- ------------- -------- -------------- ... ------- ------- --------- -------------- -------------- ------------ -----
    HD203608 321.61455 -65.36429 ADP.2014-09-16T11:03:30.940 077.D-0720(A)       --           5261 ...    60.9      --      33.0 53956.24265204 53956.24227009     33.00048    --
    HD203608 321.61761 -65.36485 ADP.2014-09-16T11:03:31.020 077.D-0720(A)       --           5261 ...    87.0      --    32.999 53953.36835125 53953.36796931    32.999616    --
    HD203608 321.60594 -65.36528 ADP.2014-09-16T11:03:31.067 077.D-0720(A)       --           5261 ...    73.9      --      33.0 53956.15534682 53956.15496487     33.00048    --
    ...
    HD203608 321.61113 -65.37211 ADP.2014-09-16T11:05:14.863 077.D-0720(A)       --           5261 ...    95.2      --    32.999 53954.99642615 53954.99604421    32.999616    --

The returned table has a ``dp_id`` column, which can be used to retrieve the datasets with
:meth:`~astroquery.eso.EsoClass.retrieve_data`: ``eso.retrieve_data(table["dp_id"][0])``.
More details about this method in the following section.

Query a specific instrument with constraints
--------------------------------------------

You can also query a specific instrument using the same method (e.g., ``HARPS``). For example, to retrieve **all** available HARPS data products regardless of the associated survey towards ``HD203608`` is given the following query:

.. doctest-remote-data::

    >>> table = eso.query_surveys(column_filters={"instrument_name": "HARPS", 
    ...                                            "target_name": "HD203608"})
    >>> table
    <Table length=1000>
    target_name    s_ra     s_dec              dp_id             proposal_id  abmaglim access_estsize               access_format                ... s_xel2   snr    strehl t_exptime     t_max          t_min      t_resolution t_xel
                deg       deg                                                mag        kbyte                                                 ...                            s           d              d             s            
    object    float64   float64             object               object    float64      int64                        object                   ... int64  float64 float64  float64     float64        float64       float64    int64
    ----------- --------- --------- --------------------------- ------------- -------- -------------- ------------------------------------------ ... ------ ------- ------- --------- -------------- -------------- ------------ -----
    HD203608 321.61455 -65.36429 ADP.2014-09-16T11:03:30.940 077.D-0720(A)       --           5261 application/x-votable+xml;content=datalink ...     --    60.9      --      33.0 53956.24265204 53956.24227009     33.00048    --
    HD203608 321.61761 -65.36485 ADP.2014-09-16T11:03:31.020 077.D-0720(A)       --           5261 application/x-votable+xml;content=datalink ...     --    87.0      --    32.999 53953.36835125 53953.36796931    32.999616    --
    HD203608 321.60594 -65.36528 ADP.2014-09-16T11:03:31.067 077.D-0720(A)       --           5261 application/x-votable+xml;content=datalink ...     --    73.9      --      33.0 53956.15534682 53956.15496487     33.00048    --
    ...
    HD203608 321.61113 -65.37211 ADP.2014-09-16T11:05:14.863 077.D-0720(A)       --           5261 application/x-votable+xml;content=datalink ...     --    95.2      --    32.999 53954.99642615 53954.99604421    32.999616    --

**Note:** Keep in mind that the definition of a ``survey`` is not the same as the definition of an ``instrument``. The ``survey`` (also named ``collection``) name refers to a specific observing program or science project (e.g., ``AMBRE`` or ``HARPS``), while the ``instrument_name`` refers to the physical instrument that acquired the data (e.g., ``HARPS`` or ``MUSE``). In this case, we’re retrieving **all data products from the HARPS instrument**, regardless of which survey or program they belong to—including, but not limited to the ``HARPS`` survey (collection). The survey (collection) can be checked using e.g. ``table['obs_collection']`` column.

Simple Cone Search 
------------------

This example demonstrates how to perform a basic **cone search** for publicly available **HAWK-I Phase 3 (reduced) data products** around the Galactic Center (Sgr A\*) using :meth:`~astroquery.eso.EsoClass.query_surveys`.

Sgr A\* is located at right ascension 266.41683° and declination –29.00781°. We perform a search within a 0.05-degree radius (~3 arcminutes).

.. doctest-remote-data::

    >>> # Coordinates of Sgr A* (Galactic Center)
    >>> ra = 266.41683 # degrees
    >>> dec = -29.00781 # degrees
    >>> radius = 0.05  # degrees

    >>> # Cone search
    >>> result = eso.query_surveys(
    ...        cone_ra=ra,
    ...        cone_dec=dec,
    ...        cone_radius=radius
    ...        column_filters={'instrument_name': 'HAWKI'})

Similar cone search functionality is also available through :meth:`~astroquery.eso.EsoClass.query_instrument` and :meth:`~astroquery.eso.EsoClass.query_main` by passing the same ``cone_ra``, ``cone_dec``, and ``cone_radius`` arguments. For example:

.. doctest-remote-data::

    >>> result = eso.query_instrument(
    ...             'HAWKI',
    ...             cone_ra=ra,
    ...             cone_dec=dec,
    ...             cone_radius=radius)

.. doctest-remote-data::

    >>> result = eso.query_main(
    ...             'HAWKI',
    ...             cone_ra=ra,
    ...             cone_dec=dec,
    ...             cone_radius=radius


.. _eso-tap:

Querying the TAP Service with ADQL
==================================

The ESO `TAP service <https://archive.eso.org/programmatic/#TAP>`_ allows you to issue custom `ADQL <https://www.ivoa.net/documents/ADQL/>`_ (Astronomical Data Query Language) queries against the archive metadata, offering fine-grained control over your search. TAP queries can be issued against different tables, depending on the type of data you're interested in:

- The ``ivoa.ObsCore`` table provides standardized metadata for **fully calibrated (Phase 3) data products**.
- The ``dbo.raw`` table provides access to **raw observational data** across all ESO instruments.
- The ``ist.<instrument_name>`` tables (e.g. ``ist.midi``, ``ist.muse``) allow more detailed queries tailored to **instrument-specific raw metadata**.

These various query options have also been demonstrated earlier in this documentation using high-level `astroquery.eso` interfaces such as :meth:`~astroquery.eso.EsoClass.query_instrument`, :meth:`~astroquery.eso.EsoClass.query_main`, and :meth:`~astroquery.eso.EsoClass.list_surveys`. Using ADQL directly through TAP enables greater flexibility when building complex queries that combine constraints across multiple metadata fields.

The following example queries the ``ivoa.ObsCore`` table to find fully calibrated (``calib_level=3``) multi-extension observations (``multi_ob='M'``) from the ``SPHERE`` and ``VEGAS`` surveys, with spatial pixel scales smaller than 0.2 arcsec:

.. doctest-remote-data::

    >>> from astroquery.eso import Eso
    >>> eso = Eso()
    >>> query = ("SELECT obs_collection, calib_level, multi_ob, filter, s_pixel_scale, instrument_name "
    ...          "FROM ivoa.ObsCore "
    ...          "WHERE obs_collection IN ('sphere', 'vegas') "
    ...          "AND calib_level = 3 "
    ...          "AND multi_ob = 'M' "
    ...          "AND s_pixel_scale < 0.2")
    >>> result = eso.query_tap_service(query)
    >>> result
    <Table length=15>
    obs_collection calib_level multi_ob filter s_pixel_scale instrument_name
                                                arcsec                   
        object        int32     object  object    float64         object    
    -------------- ----------- -------- ------ ------------- ---------------
            SPHERE           3        M    K12        0.0122          SPHERE
            SPHERE           3        M    K12        0.0122          SPHERE
            ...
            SPHERE           3        M      H        0.0122          SPHERE

**Note:** For more information about the TAP and how to write ADQL queries, refer to the following resources:

   - `ESO TAP+ documentation <https://archive.eso.org/programmatic/>`_: Describes ESO's implementation of TAP and the available services.
   - `IVOA TAP standard <https://www.ivoa.net/documents/TAP/>`_: The official specification from the International Virtual Observatory Alliance.
   - `ADQL specification <https://www.ivoa.net/documents/ADQL/>`_: Defines the query language used to interact with TAP services.


.. _eso-headers:

Obtaining extended information on data products
===============================================

Only a small subset of the keywords present in the data products can be obtained
with :meth:`~astroquery.eso.EsoClass.query_instrument`, :meth:`~astroquery.eso.EsoClass.query_main`, :meth:`~astroquery.eso.EsoClass.query_surveys`, or :meth:`~astroquery.eso.EsoClass.query_tap_service`.
There is however a way to get the full primary header of the FITS data products,
using :meth:`~astroquery.eso.EsoClass.get_headers`.

.. doctest-remote-data::

    >>> table = eso.query_instrument('midi',
    ...                     column_filters={
    ...                         'object': 'NGC4151',
    ...                         'date_obs': "<='2008-01-01'"
    ...                     },
    ...                     columns=['object', 'date_obs', 'dp_id'])
    >>> table_headers = eso.get_headers(table["dp_id"])
    >>> len(table_headers.columns)
    336
    >>> table_headers
               DP.ID             SIMPLE BITPIX ...   HIERARCH ESO OCS EXPO7 FNAME2     HIERARCH ESO OCS EXPO8 FNAME1     HIERARCH ESO OCS EXPO8 FNAME2
    ---------------------------- ------ ------ ... --------------------------------- --------------------------------- ---------------------------------
    MIDI.2007-02-07T07:01:51.000   True     16 ...
    MIDI.2007-02-07T07:02:49.000   True     16 ...
    MIDI.2007-02-07T07:03:30.695   True     16 ...
                             ...
    MIDI.2007-02-07T07:20:06.695   True     16 ... MIDI.2007-02-07T07:20:06.695.fits
    MIDI.2007-02-07T07:22:57.000   True     16 ... MIDI.2007-02-07T07:20:06.695.fits MIDI.2007-02-07T07:22:57.000.fits
    MIDI.2007-02-07T07:23:38.695   True     16 ... MIDI.2007-02-07T07:20:06.695.fits MIDI.2007-02-07T07:22:57.000.fits MIDI.2007-02-07T07:23:38.695.fits


As shown above, for each data product ID (``DP.ID``; note that this is equivalent to "dp_id" in ``table``), the full header (336 columns in our case) of the archive
FITS file is collected. In the above table ``table_headers``, there are as many rows as in the column ``table['dp_id']``.

.. _eso-download:

Downloading datasets from the archive
=====================================

Continuing from the query with constraints example, the first two datasets are selected,
using their data product IDs ``dp_id``, and retrieved from the ESO archive.

.. doctest-skip::

    >>> data_files = eso.retrieve_data(table['dp_id'][:2])
    INFO: Downloading datasets ... [astroquery.eso.core]
    INFO: Downloading 2 files ... [astroquery.eso.core]
    INFO: Downloading file 1/2 https://dataportal.eso.org/dataPortal/file/MIDI.2007-02-07T07:01:51.000 to /Users/foobar/.astropy/cache/astroquery/Eso [astroquery.eso.core]
    INFO: Successfully downloaded dataset MIDI.2007-02-07T07:01:51.000 to /Users/foobar/.astropy/cache/astroquery/Eso/MIDI.2007-02-07T07:01:51.000.fits.Z [astroquery.eso.core]
    INFO: Downloading file 2/2 https://dataportal.eso.org/dataPortal/file/MIDI.2007-02-07T07:02:49.000 to /Users/foobar/.astropy/cache/astroquery/Eso [astroquery.eso.core]
    INFO: Successfully downloaded dataset MIDI.2007-02-07T07:02:49.000 to /Users/foobar/.astropy/cache/astroquery/Eso/MIDI.2007-02-07T07:02:49.000.fits.Z [astroquery.eso.core]
    INFO: Uncompressing file /Users/foobar/.astropy/cache/astroquery/Eso/MIDI.2007-02-07T07:01:51.000.fits.Z [astroquery.eso.core]
    INFO: Uncompressing file /Users/foobar/.astropy/cache/astroquery/Eso/MIDI.2007-02-07T07:02:49.000.fits.Z [astroquery.eso.core]
    INFO: Done! [astroquery.eso.core]
    >>> data_files
    ['/Users/foobar/.astropy/cache/astroquery/Eso/MIDI.2007-02-07T07:01:51.000.fits',
     '/Users/foobar/.astropy/cache/astroquery/Eso/MIDI.2007-02-07T07:02:49.000.fits']

The file names, returned in data_files, points to the decompressed datasets
(without the .Z extension) that have been locally downloaded. The default location (in the astropy cache) of the decompressed datasets can be adjusted by providing a ``destination`` keyword in the call to :meth:`~astroquery.eso.EsoClass.retrieve_data`.

.. doctest-skip::
    >>> data_files = eso.retrieve_data(table['dp_id'][:2], destination='./eso_data/')

By default, if a requested dataset is already found, it is not downloaded again from the archive.
To force the retrieval of data that are present in the destination directory, use ``continuation=True``
in the call to :meth:`~astroquery.eso.EsoClass.retrieve_data`.


Troubleshooting
===============

Clearing the cache
------------------

If you encounter repeated query failures or see outdated or inconsistent results, you may be dealing with a stale or corrupted local cache. You can clear the entire Astropy cache for ESO with the following command:

.. doctest-skip::

    >>> from astroquery.eso import Eso
    >>> Eso.clear_cache()

This will remove all cached ESO queries and downloaded metadata files. Data products already downloaded will remain unless manually deleted.

.. _column-filters-fix:

Using the correct ``column_filters``
------------------------------------

If your query fails or silently returns no results, it might be because you're using column names that are **accepted in the ESO web interface (WDB)** but **not supported by the TAP/ADQL interface** that now is used within ``astroquery.eso``. A common case involves using ``stime`` and ``etime``, which are not valid TAP fields. Instead, use ``exp_start``, the TAP-compliant column representing the observation start time. This field supports SQL-style date filtering.

Below are examples of invalid filter usage and their corrected TAP-compatible versions.

Filtering between two dates
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. doctest-skip::

    # ❌ Invalid (WDB-specific fields, not recognized by TAP)
    column_filters = {
        'stime': '2024-01-01',
        'etime': '2024-12-31'
    }

.. doctest-skip::

    # ✅ Correct (TAP-compliant syntax using 'exp_start')
    column_filters = {
        'exp_start': "between '2024-01-01' and '2024-12-31'"
    }

Filtering with only a start date
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. doctest-skip::

    # ❌ Invalid
    column_filters = {
        'stime': '2024-01-01'
    }

.. doctest-skip::

    # ✅ Correct
    column_filters = {
        'exp_start': "> '2024-01-01'"
    }

Filtering with only an end date
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. doctest-skip::

    # ❌ Invalid
    column_filters = {
        'etime': '2024-12-31'
    }

.. doctest-skip::

    # ✅ Correct
    column_filters = {
        'exp_start': "< '2024-12-31'"
    }

**Note:** To inspect which filterable columns are available in your current context, use:

.. doctest-remote-data::
    >>> eso.query_instrument('midi', help=True)

or for all-instrument queries:

.. doctest-remote-data::
    >>> eso.query_main(help=True)


Reference/API
=============

.. automodapi:: astroquery.eso
    :no-inheritance-diagram: